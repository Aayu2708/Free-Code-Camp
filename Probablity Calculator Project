import random

class Hat:
    def __init__(self, **balls):
        self.contents = [color for color, count in balls.items() for _ in range(count)]

    def draw(self, num_balls):
        if num_balls >= len(self.contents):
            drawn_balls = self.contents.copy()
            self.contents = []
            return drawn_balls
        drawn_balls = random.sample(self.contents, num_balls)
        for ball in drawn_balls:
            self.contents.remove(ball)
        return drawn_balls

def experiment(hat, expected_balls, num_balls_drawn, num_experiments):
    successful_experiments = 0
    
    for _ in range(num_experiments):
        # Create a new instance of the hat to avoid mutation
        hat_copy = Hat(**{ball: hat.contents.count(ball) for ball in set(hat.contents)})
        drawn_balls = hat_copy.draw(num_balls_drawn)
        
        # Count the drawn balls
        drawn_balls_count = {ball: drawn_balls.count(ball) for ball in set(drawn_balls)}
        
        # Check if drawn balls match expected balls
        success = all(drawn_balls_count.get(ball, 0) >= count for ball, count in expected_balls.items())
        
        if success:
            successful_experiments += 1

    return successful_experiments / num_experiments

# Example usage:
hat = Hat(blue=5, red=4, green=2)
probability = experiment(hat=hat,
                         expected_balls={"red":1, "green":2},
                         num_balls_drawn=4,
                         num_experiments=2000)
print(probability)
